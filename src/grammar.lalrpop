use super::{ValidationError, validate_identifier, validate_forma, WrapError};
use technique::language::*;

grammar;

extern {
    type Error = ValidationError;
}

match {
    r"[A-Za-z0-9_\-\.,\[\]]*" => WORD,
    _

}

pub technique_file: Technique = {
    <m:magic_line>
    <s:spdx_line?>
    <t:template_line?> => {
        println!("spdx_line: {:?}", s);
        Technique {version:m, license:None, copyright:None}
    }
}

pub identifier: String = {
    <WORD> =>? validate_identifier(<>).wrap()
};

pub forma: String = {
    <WORD> =>? validate_forma(<>).wrap()
}

pub magic_line: u8 = {
    "%" "technique" "v1" => 1
};

pub spdx_line: (Option<String>,Option<String>) = {
    "!" <one:license> ";" r"\(c\)|\(C\)|Â©" <two:copyright> => (Some(one.to_owned()),Some(two.to_owned())),
    "!" <one:license> => (Some(one.to_owned()),None)
}

pub template_line: Option<String> = {
    "&" <template> => Some(<>.to_owned())
}

pub template: String = {
    <WORD> => <>.to_owned()
}

pub license: String = {
    <WORD+> => <>.join(" ").to_owned()
};

pub copyright: String = {
    <WORD+> => <>.join(" ").to_owned()
}

pub declaration_line: Procedure = {
    <n:declaration> <s:signature?> =>
        Procedure {
            name:n,
            signature:s
        }
}

pub signature: Signature = {
    <d:forma> "->" <r:forma> =>
        Signature {
            domain:d,
            range:r
        }
}

pub declaration: String = {
    <identifier> ":" => <>.to_owned()
}

pub attribute_line: Attribute = {
    "@" <attribute> => <>,
}

pub attribute: Attribute = {
    <identifier> =>
        Attribute {
            name: <>.to_owned()
        }
}
